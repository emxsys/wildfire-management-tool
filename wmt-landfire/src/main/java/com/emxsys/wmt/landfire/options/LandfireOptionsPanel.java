/*
 * Copyright (c) 2010-2012, Bruce Schubert. <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of Bruce Schubert, Emxsys nor the names of its 
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.wmt.landfire.options;

import com.emxsys.wmt.landfire.layers.LandfireTiledImageLayerFactory;
import com.emxsys.util.ModuleUtil;
import com.emxsys.util.SpringUtilities;
import gov.nasa.worldwind.util.WWXML;
import java.awt.Component;
import java.io.File;
import java.net.URL;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.w3c.dom.Element;


final public class LandfireOptionsPanel extends javax.swing.JPanel {

    public static final String XML_LAYER_FOLDER = "WorldWind/Layers/Overlay";
    public static final String DATACACHENAME = "DataCacheName";
    public static final String DATASETNAME = "DatasetName";
    public static final String DISPLAYNAME = "DisplayName";
    public static final String LANDFIRE_CACHE_ROOT = "LANDFIRE";
    public static final String SERVICE_LAYERNAMES = "Service/LayerNames";
    public static final String SERVICE_GETCAPABILITIESURL = "Service/GetCapabilitiesURL";
    public static final String SERVICE_GETMAPURL = "Service/GetMapURL";
    final LandfireOptionsPanelController controller;
    private boolean initialized = false;

    public LandfireOptionsPanel(LandfireOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jPanel1 = new JPanel();

        setName("Landfire Options"); // NOI18N

        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(jPanel1);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // (re)load 
        if (initialized) {
            jPanel1.removeAll();
            initialized = false;
        }
        // Read settings and initialize GUI from the Layer.XML file
        FileObject[] children = FileUtil.getConfigFile(XML_LAYER_FOLDER).getChildren();
        for (FileObject fo : children) {
            // Filter out layers that aren't from  LANDFIRE
            String source = (String) fo.getAttribute("source");
            if (source != null && source.equals("LANDFIRE")) {
                LayerPanel p = new LayerPanel(fo);
                jPanel1.add(p);
            }
        }
        initialized = true;
    }


    private final class LayerPanel extends JPanel {

        Element dom;
        final FileObject fo;
        JTextField layerTextField;
        JTextField capsTextField;
        JTextField mapTextField;

        LayerPanel(FileObject fo) {
            this.fo = fo;
            this.dom = LandfireTiledImageLayerFactory.getLayerDomElement(fo);
            String title = (String) fo.getAttribute("displayName");
            setLayout(new SpringLayout());
            setBorder(new TitledBorder(title));

            layerTextField = addControlsToPanel("Layer Name:", WWXML.getText(dom, SERVICE_LAYERNAMES));
            layerTextField.getDocument().addDocumentListener(new ChangedTextNotifier());
            
            //TODO: Add service version: <Service serviceName="OGC:WMS" version="1.3.0">

            capsTextField = addControlsToPanel("Capabilities URL:", WWXML.getText(dom, SERVICE_GETCAPABILITIESURL));
            capsTextField.getDocument().addDocumentListener(new ChangedTextNotifier());

            mapTextField = addControlsToPanel("Map URL:", WWXML.getText(dom, SERVICE_GETMAPURL));
            mapTextField.getDocument().addDocumentListener(new ChangedTextNotifier());

            //Lay out the panel.
            SpringUtilities.makeCompactGrid(this,
                3, 2, //rows, cols
                6, 6, //initX, initY
                6, 6);  //xPad, yPad
        }


        private class ChangedTextNotifier implements DocumentListener {

            @Override
            public void insertUpdate(DocumentEvent e) {
                if (LandfireOptionsPanel.this.initialized) {
                    LandfireOptionsPanel.this.controller.changed();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (LandfireOptionsPanel.this.initialized) {
                    LandfireOptionsPanel.this.controller.changed();
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // no action for "style" changes
            }
        }

        private JTextField addControlsToPanel(String label, String value) {
            JLabel l = new JLabel(label, JLabel.TRAILING);
            add(l);
            JTextField t = new JTextField(value);
            l.setLabelFor(t);
            add(t);
            return t;
        }
    }

    void store() {
        // Store modified settings
        Component[] components = jPanel1.getComponents();
        for (Component component : components) {
            if (component instanceof LayerPanel) {
                LayerPanel p = (LayerPanel) component;

                // Update the XML elements
                String layerName = p.layerTextField.getText();
                Element layers = WWXML.getElement(p.dom, SERVICE_LAYERNAMES, null);
                if (layers != null) {
                    System.out.println(layerName);
                    layers.setTextContent(layerName);
                }
                Element displayName = WWXML.getElement(p.dom, DISPLAYNAME, null);
                if (displayName != null) {
                    displayName.setTextContent(layerName);
                }
                Element dataName = WWXML.getElement(p.dom, DATASETNAME, null);
                if (dataName != null) {
                    dataName.setTextContent(layerName);
                }
                Element cacheName = WWXML.getElement(p.dom, DATACACHENAME, null);
                if (cacheName != null) {
                    cacheName.setTextContent(LANDFIRE_CACHE_ROOT + "/" + layerName);
                }

                Element caps = WWXML.getElement(p.dom, SERVICE_GETCAPABILITIESURL, null);
                if (caps != null) {
                    System.out.println(p.capsTextField.getText());
                    caps.setTextContent(p.capsTextField.getText());
                }

                Element map = WWXML.getElement(p.dom, SERVICE_GETMAPURL, null);
                if (map != null) {
                    System.out.println(p.mapTextField.getText());
                    map.setTextContent(p.mapTextField.getText());
                }

                // Save the updated DOM to the XML file specified in the "config" attribute
                File f = ModuleUtil.createFileFromUrl((URL) p.fo.getAttribute("config"));
                if (f != null) {
                    WWXML.saveDocumentToFile(p.dom.getOwnerDocument(), f.getPath());
                }
            }
        }
    }

    boolean valid() {
        Component[] components = jPanel1.getComponents();
        for (Component component : components) {
            if (component instanceof LayerPanel) {
                LayerPanel p = (LayerPanel) component;
                if (p.layerTextField.getText().isEmpty()) {
                    return false;
                } else if (p.capsTextField.getText().isEmpty()) {
                    return false;
                } else if (p.mapTextField.getText().isEmpty()) {
                    return false;
                }
            }
        }

        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
