/*
 * Copyright (c) 2014, Bruce Schubert <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     - Neither the name of Bruce Schubert, Emxsys nor the names of its 
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.weather.wizards;

import com.emxsys.visad.GeneralUnit;
import com.emxsys.weather.api.WeatherPreferences;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import org.openide.util.NbBundle.Messages;
import visad.CommonUnit;
import visad.Unit;

@Messages({"CTL_DiurnalUnitsName=Unit of Measure"})
public final class DiurnalWeatherPanelUnits extends JPanel {

    public static final String PROP_WEATHER_PANEL_UNITS = DiurnalWeatherPanelUnits.class.getSimpleName();
    private final ActionListener listener;
    

    /** Creates new form DiurnalWeatherVisualPanel1 */
    public DiurnalWeatherPanelUnits() {
        initComponents();

        setAirTempUom(WeatherPreferences.getAirTempUnit());
        setWindSpeedUom(WeatherPreferences.getWindSpeedUnit());

        listener = (ActionEvent e) -> {
            firePropertyChange(PROP_WEATHER_PANEL_UNITS, null, e.getSource());
        };
        // listen to changes in form fields and fire property change 
        this.fahrenheitButton.addActionListener(listener);
        this.celsiusButton.addActionListener(listener);
        this.ktsButton.addActionListener(listener);
        this.ktsButton.addActionListener(listener);
        this.mphButton.addActionListener(listener);
        this.kphButton.addActionListener(listener);
        this.mpsButton.addActionListener(listener);

    }

    public Unit getAirTempUom() {
        if (fahrenheitButton.isSelected()) {
            return GeneralUnit.degF;
        } else {
            return GeneralUnit.degC;
        }
    }

    public void setAirTempUom(Unit tempUom) {
        if (tempUom.equals(GeneralUnit.degF)) {
            fahrenheitButton.setSelected(true);
        } else {
            celsiusButton.setSelected(true);
        }
    }

    public Unit getWindSpdUom() {
        if (mphButton.isSelected()) {
            return GeneralUnit.mph;
        } else if (ktsButton.isSelected()) {
            return GeneralUnit.knot;
        } else if (kphButton.isSelected()) {
            return GeneralUnit.kph;
        } else {
            return CommonUnit.meterPerSecond;
        }
    }

    public void setWindSpeedUom(Unit speedUom) {
        if (speedUom.equals(GeneralUnit.mph)) {
            mphButton.setSelected(true);
        } else if (speedUom.equals(GeneralUnit.knot)) {
            ktsButton.setSelected(true);
        } else if (speedUom.equals(GeneralUnit.kph)) {
            kphButton.setSelected(true);
        } else {
            mpsButton.setSelected(true);
        }
    }

    @Override
    public String getName() {
        return Bundle.CTL_DiurnalUnitsName();
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        fahrenheitButton = new javax.swing.JRadioButton();
        celsiusButton = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        mphButton = new javax.swing.JRadioButton();
        ktsButton = new javax.swing.JRadioButton();
        kphButton = new javax.swing.JRadioButton();
        mpsButton = new javax.swing.JRadioButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.jLabel3.text")); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        buttonGroup1.add(fahrenheitButton);
        org.openide.awt.Mnemonics.setLocalizedText(fahrenheitButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.fahrenheitButton.text")); // NOI18N

        buttonGroup1.add(celsiusButton);
        org.openide.awt.Mnemonics.setLocalizedText(celsiusButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.celsiusButton.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(celsiusButton)
                    .addComponent(fahrenheitButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fahrenheitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(celsiusButton)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        buttonGroup2.add(mphButton);
        org.openide.awt.Mnemonics.setLocalizedText(mphButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.mphButton.text")); // NOI18N

        buttonGroup2.add(ktsButton);
        org.openide.awt.Mnemonics.setLocalizedText(ktsButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.ktsButton.text")); // NOI18N

        buttonGroup2.add(kphButton);
        org.openide.awt.Mnemonics.setLocalizedText(kphButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.kphButton.text")); // NOI18N

        buttonGroup2.add(mpsButton);
        org.openide.awt.Mnemonics.setLocalizedText(mpsButton, org.openide.util.NbBundle.getMessage(DiurnalWeatherPanelUnits.class, "DiurnalWeatherPanelUnits.mpsButton.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mphButton)
                    .addComponent(ktsButton)
                    .addComponent(kphButton)
                    .addComponent(mpsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ktsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpsButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton celsiusButton;
    private javax.swing.JRadioButton fahrenheitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton kphButton;
    private javax.swing.JRadioButton ktsButton;
    private javax.swing.JRadioButton mphButton;
    private javax.swing.JRadioButton mpsButton;
    // End of variables declaration//GEN-END:variables
}
