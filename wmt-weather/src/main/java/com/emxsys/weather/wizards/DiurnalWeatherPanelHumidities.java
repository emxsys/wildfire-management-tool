/*
 * Copyright (c) 2014, Bruce Schubert <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     - Neither the name of Bruce Schubert, Emxsys nor the names of its 
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.weather.wizards;

import com.emxsys.weather.api.WeatherPreferences;
import static com.emxsys.weather.api.WeatherPreferences.*;
import com.emxsys.weather.panels.RelativeHumidityGauge;
import javax.swing.JPanel;
import org.openide.util.NbBundle;
import visad.Real;

@NbBundle.Messages({"CTL_DiurnalHumidities=Relative Humidities",
                    "CTL_DiurnalHumiditySunrise=Sunrise",
                    "CTL_DiurnalHumidityNoon=Noon",
                    "CTL_DiurnalHumidity1400=Afternoon",
                    "CTL_DiurnalHumiditySunset=Sunset",})

public final class DiurnalWeatherPanelHumidities extends JPanel {

    private final RelativeHumidityGauge panelSunrise;
    private final RelativeHumidityGauge panelNoon;
    private final RelativeHumidityGauge panel1400;
    private final RelativeHumidityGauge panelSunset;

    /**
     * Creates new form DiurnalWeatherPanelHumidities
     */
    public DiurnalWeatherPanelHumidities() {
        initComponents();
        
        panelSunrise = new RelativeHumidityGauge(
                Bundle.CTL_DiurnalHumiditySunrise(),
                WeatherPreferences.getRelHumidityValue(PREF_RH_SUNRISE));
        panelNoon = new RelativeHumidityGauge(
                Bundle.CTL_DiurnalHumidityNoon(),
                WeatherPreferences.getRelHumidityValue(PREF_RH_1200));
        panel1400 = new RelativeHumidityGauge(
                Bundle.CTL_DiurnalHumidity1400(),
                WeatherPreferences.getRelHumidityValue(PREF_RH_1400));
        panelSunset = new RelativeHumidityGauge(
                Bundle.CTL_DiurnalHumiditySunset(),
                WeatherPreferences.getRelHumidityValue(PREF_RH_SUNSET));
        jPanel1.add(panelSunrise);
        jPanel2.add(panelNoon);
        jPanel3.add(panel1400);
        jPanel4.add(panelSunset);
    }

    @Override
    public String getName() {
        return Bundle.CTL_DiurnalHumidities();
    }

    public Real getSunriseHumidity() {
        return panelSunrise.getHumidity();
    }

    public Real getNoonHumidity() {
        return panelNoon.getHumidity();
    }

    public Real get1400Humidity() {
        return panel1400.getHumidity();
    }

    public Real getSunsetHumidity() {
        return panelSunset.getHumidity();
    }

    public void setSunriseHumidity(Real value) {
        panelSunrise.setHumidity(value);
    }

    public void setNoonHumidity(Real value) {
        panelNoon.setHumidity(value);
    }

    public void set1400Humidity(Real value) {
        panel1400.setHumidity(value);
    }

    public void setSunsetHumidity(Real value) {
        panelSunset.setHumidity(value);
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(600, 300));
        setLayout(new java.awt.GridLayout(1, 4, 3, 0));

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1);

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new java.awt.BorderLayout());
        add(jPanel2);

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setLayout(new java.awt.BorderLayout());
        add(jPanel3);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.setLayout(new java.awt.BorderLayout());
        add(jPanel4);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
