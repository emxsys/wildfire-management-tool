# Copyright (c) 2014, Bruce Schubert <bruce@emxsys.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
#     - Neither the name of Bruce Schubert, Emxsys nor the names of its 
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# "handlers" specifies a comma separated list of log Handler 
# classes. These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.

	handlers = java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers. For any given facility this global level
# can be overriden by a facility-specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.

    .level = CONFIG

# Limit the messages that are printed on the console using these setting:

    java.util.logging.ConsoleHandler.level = ALL

# Override the logging levels for specific packages: 

    com.emxsys.wmt.globe.level = CONFIG
    com.terramenta.globe.level = CONFIG 
    com.terramenta.ribbon.RibbonComponentFactory.level = INFO

# The formatting can be customized by specifying the format string in the 
# java.util.logging.SimpleFormatter.format property. The given LogRecord will be 
# formatted as if by calling:
#
#    String.format(format, date, source, logger, level, message, thrown);
# 
# where the arguments are:
#
#         format    - the java.util.Formatter format string specified in the 
#                     java.util.logging.SimpleFormatter.format property or the default format.
#    (%1$tc) date   - a Date object representing event time of the log record.
#    (%2$s) source  - a string representing the caller, if available; otherwise, the logger's name.
#    (%3$s) logger  - the logger's name.
#    (%4$s) level   - the log level.
#    (%5$s) message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. 
#                     It uses java.text formatting and does not use the java.util.Formatter format argument.
#    (%6$s) thrown  - a string representing the throwable associated with the log record and its backtrace 
#                     beginning with a newline character, if any; otherwise, an empty string.
# Examples:
#
#    java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
#
# This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket.
#
#     WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]
#     
#   java.util.logging.SimpleFormatter.format=%1$tc %2$s%n%4$s: %5$s%6$s%n
#
# This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); 
# the second line includes the log level (4$) and the log message (5$) followed with the throwable 
# and its backtrace (6$), if any:
#
#     Tue Mar 22 13:11:31 PDT 2011 MyClass fatal
#     SEVERE: several message with an exception
#     java.lang.IllegalArgumentException: invalid argument
#             at MyClass.mash(MyClass.java:9)
#             at MyClass.crunch(MyClass.java:6)
#            at MyClass.main(MyClass.java:3)
#

    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.SimpleFormatter.format=%4$s [%2$s]: %5$s %6$s%n

