/*
 * Copyright (c) 2014, Bruce Schubert <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     - Neither the name of Bruce Schubert,  nor the names of its 
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.wildfire.options;

import static com.emxsys.wildfire.options.WildfireOptions.UOM_CHAINS;
import static com.emxsys.wildfire.options.WildfireOptions.UOM_KPH;
import static com.emxsys.wildfire.options.WildfireOptions.UOM_MPH;
import static com.emxsys.wildfire.options.WildfireOptions.UOM_MPS;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

final class WildfireUnitsOptionsPanel extends javax.swing.JPanel {

    private final WildfireUnitsOptionsPanelController controller;
    private final ActionListener listener;

    WildfireUnitsOptionsPanel(WildfireUnitsOptionsPanelController controller) {
        this.controller = controller;
        this.listener = (ActionEvent e) -> {
            controller.changed();
        };
        initComponents();
        // listen to changes in form fields and call controller.changed()
        this.chainsButton.addActionListener(listener);
        this.mphButton.addActionListener(listener);
        this.kphButton.addActionListener(listener);
        this.mpsButton.addActionListener(listener);
    }

    /** This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rosButtonGroup = new javax.swing.ButtonGroup();
        descLabel = new javax.swing.JLabel();
        rosLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chainsButton = new javax.swing.JRadioButton();
        mphButton = new javax.swing.JRadioButton();
        kphButton = new javax.swing.JRadioButton();
        mpsButton = new javax.swing.JRadioButton();

        org.openide.awt.Mnemonics.setLocalizedText(descLabel, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.descLabel.text")); // NOI18N
        descLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.openide.awt.Mnemonics.setLocalizedText(rosLabel, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.rosLabel.text")); // NOI18N

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        rosButtonGroup.add(chainsButton);
        org.openide.awt.Mnemonics.setLocalizedText(chainsButton, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.chainsButton.text")); // NOI18N

        rosButtonGroup.add(mphButton);
        org.openide.awt.Mnemonics.setLocalizedText(mphButton, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.mphButton.text")); // NOI18N

        rosButtonGroup.add(kphButton);
        org.openide.awt.Mnemonics.setLocalizedText(kphButton, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.kphButton.text")); // NOI18N

        rosButtonGroup.add(mpsButton);
        org.openide.awt.Mnemonics.setLocalizedText(mpsButton, org.openide.util.NbBundle.getMessage(WildfireUnitsOptionsPanel.class, "WildfireUnitsOptionsPanel.mpsButton.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(chainsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(mpsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(kphButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chainsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kphButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mpsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rosLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(descLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rosLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // read settings and initialize GUI
        switch (WildfireOptions.getRateOfSpreadValue()) {
            case UOM_CHAINS:
                this.chainsButton.setSelected(true);
                break;
            case UOM_MPH:
                this.mphButton.setSelected(true);
                break;
            case UOM_MPS:
                this.mpsButton.setSelected(true);
                break;
            case UOM_KPH:
                this.kphButton.setSelected(true);
                break;
        }
    }

    void store() {
        // store modified settings
        if (this.mphButton.isSelected()) {
            WildfireOptions.setRateOfSpread(UOM_MPH);
        } else if (this.kphButton.isSelected()) {
            WildfireOptions.setRateOfSpread(UOM_KPH);
        } else if (this.chainsButton.isSelected()) {
            WildfireOptions.setRateOfSpread(UOM_CHAINS);
        } else if (this.mpsButton.isSelected()) {
            WildfireOptions.setRateOfSpread(UOM_MPS);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton chainsButton;
    private javax.swing.JLabel descLabel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton kphButton;
    private javax.swing.JRadioButton mphButton;
    private javax.swing.JRadioButton mpsButton;
    private javax.swing.ButtonGroup rosButtonGroup;
    private javax.swing.JLabel rosLabel;
    // End of variables declaration//GEN-END:variables
}
