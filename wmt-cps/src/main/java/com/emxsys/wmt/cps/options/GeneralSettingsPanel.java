/*
 * Copyright (c) 2009-2012, Bruce Schubert. <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of Bruce Schubert, Emxsys nor the names of its 
 *   contributors may be used to endorse or promote products derived
 *   from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.wmt.cps.options;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.prefs.Preferences;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 *
 * @author Bruce Schubert <bruce@emxsys.com>
 * @version  $Id: GeneralSettingsPanel.java 315 2012-10-20 13:42:54Z bdschubert $
 */
final public class GeneralSettingsPanel extends javax.swing.JPanel {

    public static final String UOM_KEY = "uom";
    public static final String UOM_US = "us";
    public static final String UOM_METRIC = "metric";
    public static final String UOM_SI = "si";
    // Air Temp Preferences property keys
    public static final String TEMP_1400_KEY = "tempAt1400";
    public static final String TEMP_SUNSET_KEY = "tempAtSunset";
    public static final String TEMP_SUNRISE_KEY = "tempAtSunrise";
    public static final String TEMP_1200_KEY = "tempAtNoon";
    // Defaults for temp controls (F)
    public static final int DEFAULT_TEMP_1400 = 82;
    public static final int DEFAULT_TEMP_SUNSET = 75;
    public static final int DEFAULT_TEMP_SUNRISE = 65;
    public static final int DEFAULT_TEMP_1200 = 80;
    // Humidity Preferences property keys
    public static final String RH_1400_KEY = "rhAt1400";
    public static final String RH_SUNSET_KEY = "rhAtSunset";
    public static final String RH_SUNRISE_KEY = "rhAtSunrise";
    public static final String RH_1200_KEY = "rhAtNoon";
    // Defaults for rh controls
    public static final int DEFAULT_RH_1400 = 6;
    public static final int DEFAULT_RH_SUNSET = 8;
    public static final int DEFAULT_RH_SUNRISE = 20;
    public static final int DEFAULT_RH_1200 = 7;
    // Form members
    private final CpsOptionsPanelController controller;

    private Preferences pref;
    private String initialUOM = "";
    private boolean shouldRestart = false;

    public GeneralSettingsPanel(CpsOptionsPanelController controller) {
        pref = NbPreferences.forModule(GeneralSettingsPanel.class);
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupUOM = new ButtonGroup();
        jLabelUOM = new JLabel();
        jRadioBtnUS = new JRadioButton();
        jRadioBtnMetric = new JRadioButton();
        jRadioBtnSI = new JRadioButton();
        jPanel1 = new JPanel();
        jLabelTime = new JLabel();
        jLabelTemp = new JLabel();
        jLabelRH = new JLabel();
        jLabel1400 = new JLabel();
        temp1400 = new JFormattedTextField();
        rh1400 = new JFormattedTextField();
        jLabelSunset = new JLabel();
        tempSunset = new JFormattedTextField();
        rhSunset = new JFormattedTextField();
        jLabelSunrise = new JLabel();
        tempSunrise = new JFormattedTextField();
        rhSunrise = new JFormattedTextField();
        jLabelNoon = new JLabel();
        temp1200 = new JFormattedTextField();
        rh1200 = new JFormattedTextField();
        jLabelWeatherCycle = new JLabel();
        jSeparator1 = new JSeparator();
        jSeparator2 = new JSeparator();

        Mnemonics.setLocalizedText(jLabelUOM, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelUOM.text")); // NOI18N

        buttonGroupUOM.add(jRadioBtnUS);
        jRadioBtnUS.setSelected(true);
        Mnemonics.setLocalizedText(jRadioBtnUS, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jRadioBtnUS.text")); // NOI18N

        buttonGroupUOM.add(jRadioBtnMetric);
        Mnemonics.setLocalizedText(jRadioBtnMetric, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jRadioBtnMetric.text")); // NOI18N

        buttonGroupUOM.add(jRadioBtnSI);
        Mnemonics.setLocalizedText(jRadioBtnSI, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jRadioBtnSI.text")); // NOI18N
        jRadioBtnSI.setEnabled(false);

        jPanel1.setLayout(new GridLayout(5, 3, 5, 0));

        jLabelTime.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jLabelTime.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabelTime, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelTime.text")); // NOI18N
        jPanel1.add(jLabelTime);

        jLabelTemp.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jLabelTemp.setHorizontalAlignment(SwingConstants.CENTER);
        Mnemonics.setLocalizedText(jLabelTemp, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelTemp.text")); // NOI18N
        jPanel1.add(jLabelTemp);

        jLabelRH.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jLabelRH.setHorizontalAlignment(SwingConstants.CENTER);
        Mnemonics.setLocalizedText(jLabelRH, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelRH.text")); // NOI18N
        jPanel1.add(jLabelRH);

        jLabel1400.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabel1400, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabel1400.text")); // NOI18N
        jLabel1400.setHorizontalTextPosition(SwingConstants.RIGHT);
        jPanel1.add(jLabel1400);

        temp1400.setColumns(4);
        temp1400.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("##0"))));
        temp1400.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(temp1400);

        rh1400.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0"))));
        rh1400.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(rh1400);

        jLabelSunset.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabelSunset, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelSunset.text")); // NOI18N
        jLabelSunset.setHorizontalTextPosition(SwingConstants.RIGHT);
        jPanel1.add(jLabelSunset);

        tempSunset.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("##0"))));
        tempSunset.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(tempSunset);

        rhSunset.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0"))));
        rhSunset.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(rhSunset);

        jLabelSunrise.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabelSunrise, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelSunrise.text")); // NOI18N
        jLabelSunrise.setHorizontalTextPosition(SwingConstants.RIGHT);
        jPanel1.add(jLabelSunrise);

        tempSunrise.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("##0"))));
        tempSunrise.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(tempSunrise);

        rhSunrise.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0"))));
        rhSunrise.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(rhSunrise);

        jLabelNoon.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabelNoon, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelNoon.text")); // NOI18N
        jLabelNoon.setHorizontalTextPosition(SwingConstants.RIGHT);
        jPanel1.add(jLabelNoon);

        temp1200.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("##0"))));
        temp1200.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(temp1200);

        rh1200.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0"))));
        rh1200.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.add(rh1200);

        Mnemonics.setLocalizedText(jLabelWeatherCycle, NbBundle.getMessage(GeneralSettingsPanel.class, "GeneralSettingsPanel.jLabelWeatherCycle.text")); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelUOM)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelWeatherCycle)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                    .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jRadioBtnMetric)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioBtnUS, GroupLayout.PREFERRED_SIZE, 232, Short.MAX_VALUE)
                                .addGap(55, 55, 55))
                            .addComponent(jRadioBtnSI))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUOM))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jRadioBtnUS)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jRadioBtnMetric)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jRadioBtnSI)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jLabelWeatherCycle)
                    .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Retrieve a property from the preferences file; returns the default value
     * if the property has not been established.
     * @param wwPropertyKey
     * @param defaultValue
     * @return preference
     */
    private String getIntPreference(String propertyKey, int defaultValue) {
        int value = pref.getInt(propertyKey, defaultValue);
        return Integer.toString(value);
    }

    public boolean getShouldRestart() {
        return shouldRestart;
    }

    public void load() {

        initialUOM = pref.get(UOM_KEY, UOM_US);
        if (initialUOM.matches(UOM_US)) {
            this.jRadioBtnUS.setSelected(true);
        } else if (initialUOM.matches(UOM_METRIC)) {
            this.jRadioBtnMetric.setSelected(true);
        } else if (initialUOM.matches(UOM_SI)) {
            this.jRadioBtnSI.setSelected(true);
        }

        this.temp1400.setText((getIntPreference(TEMP_1400_KEY, DEFAULT_TEMP_1400)));
        this.tempSunset.setText((getIntPreference(TEMP_SUNSET_KEY, DEFAULT_TEMP_SUNSET)));
        this.tempSunrise.setText((getIntPreference(TEMP_SUNRISE_KEY, DEFAULT_TEMP_SUNRISE)));
        this.temp1200.setText((getIntPreference(TEMP_1200_KEY, DEFAULT_TEMP_1200)));

        this.rh1400.setText((getIntPreference(RH_1400_KEY, DEFAULT_RH_1400)));
        this.rhSunset.setText((getIntPreference(RH_SUNSET_KEY, DEFAULT_RH_SUNSET)));
        this.rhSunrise.setText((getIntPreference(RH_SUNRISE_KEY, DEFAULT_RH_SUNRISE)));
        this.rh1200.setText((getIntPreference(RH_1200_KEY, DEFAULT_RH_1200)));
    }

    public void store() {

        if (this.jRadioBtnUS.isSelected()) {
            pref.put(UOM_KEY, UOM_US);
        } else if (this.jRadioBtnMetric.isSelected()) {
            pref.put(UOM_KEY, UOM_METRIC);
        } else if (this.jRadioBtnSI.isSelected()) {
            pref.put(UOM_KEY, UOM_SI);
        }
        String currentUOM = pref.get(UOM_KEY, UOM_US);
        if (!currentUOM.equals(initialUOM))
            shouldRestart = true;

        pref.putInt(TEMP_1400_KEY, Integer.parseInt(this.temp1400.getText()));
        pref.putInt(TEMP_SUNSET_KEY, Integer.parseInt(this.tempSunset.getText()));
        pref.putInt(TEMP_SUNRISE_KEY, Integer.parseInt(this.tempSunrise.getText()));
        pref.putInt(TEMP_1200_KEY, Integer.parseInt(this.temp1200.getText()));

        pref.putInt(RH_1400_KEY, Integer.parseInt(this.rh1400.getText()));
        pref.putInt(RH_SUNSET_KEY, Integer.parseInt(this.rhSunset.getText()));
        pref.putInt(RH_SUNRISE_KEY, Integer.parseInt(this.rhSunrise.getText()));
        pref.putInt(RH_1200_KEY, Integer.parseInt(this.rh1200.getText()));
    }

    public boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroupUOM;
    private JLabel jLabel1400;
    private JLabel jLabelNoon;
    private JLabel jLabelRH;
    private JLabel jLabelSunrise;
    private JLabel jLabelSunset;
    private JLabel jLabelTemp;
    private JLabel jLabelTime;
    private JLabel jLabelUOM;
    private JLabel jLabelWeatherCycle;
    private JPanel jPanel1;
    private JRadioButton jRadioBtnMetric;
    private JRadioButton jRadioBtnSI;
    private JRadioButton jRadioBtnUS;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JFormattedTextField rh1200;
    private JFormattedTextField rh1400;
    private JFormattedTextField rhSunrise;
    private JFormattedTextField rhSunset;
    private JFormattedTextField temp1200;
    private JFormattedTextField temp1400;
    private JFormattedTextField tempSunrise;
    private JFormattedTextField tempSunset;
    // End of variables declaration//GEN-END:variables
}
