/*
 * Copyright (c) 2014, Bruce Schubert <bruce@emxsys.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     - Neither the name of Bruce Schubert, Emxsys nor the names of its 
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.emxsys.wmt.cps.ui;

import com.emxsys.jfree.ChartCanvas;
import com.emxsys.jfree.ChartUtil;
import java.awt.Color;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.layout.StackPane;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.openide.util.NbBundle;

/**
 *
 * @author Bruce Schubert
 */
@NbBundle.Messages({
    "CTL_WindDirChartTitle=Direction",
    "CTL_WindSpdChartTitle=Speed",})
public class WindForcePanel extends javax.swing.JPanel {

    private JFreeChart dirChart;
    private JFreeChart spdChart;
    private ChartCanvas dirCanvas;
    private ChartCanvas spdCanvas;

    /**
     * Creates new form WindPanel
     */
    public WindForcePanel() {
        initComponents();
        //initChartPanel();

        JFXPanel jfxPanelDir = new JFXPanel();
        JFXPanel jfxPanelSpd = new JFXPanel();
        // Add the panel to the Grid layout
        add(jfxPanelDir);
        add(jfxPanelSpd);

        // Must create the JavaFX scene (ChartCanvas) on an FX thread
        Platform.setImplicitExit(false);
        Platform.runLater(() -> {
            jfxPanelDir.setScene(createDirScene());
            jfxPanelSpd.setScene(createSpdScene());
        });
    }

    private Scene createDirScene() {
        dirChart = ChartUtil.createCommonCompassChart(Bundle.CTL_WindDirChartTitle(), null, ChartUtil.WIND_NEEDLE, Color.BLUE);
        dirCanvas = new ChartCanvas(dirChart);
        StackPane stackPane = new StackPane();
        stackPane.getChildren().add(dirCanvas);
        // Bind canvas size to stack pane size. 
        dirCanvas.widthProperty().bind(stackPane.widthProperty());
        dirCanvas.heightProperty().bind(stackPane.heightProperty());

        return new Scene(stackPane);
    }

    private Scene createSpdScene() {
        spdChart = ChartUtil.createCommonDialChart(Bundle.CTL_WindSpdChartTitle(), null, 0, 50);
        spdCanvas = new ChartCanvas(spdChart);
        StackPane stackPane = new StackPane();
        stackPane.getChildren().add(spdCanvas);
        // Bind canvas size to stack pane size. 
        spdCanvas.widthProperty().bind(stackPane.widthProperty());
        spdCanvas.heightProperty().bind(stackPane.heightProperty());

        return new Scene(stackPane);
    }

    private void initChartPanel() {
        // Create a compass chart to depict wind direction
        dirChart = ChartUtil.createCommonCompassChart(Bundle.CTL_WindDirChartTitle(), null, ChartUtil.WIND_NEEDLE, Color.BLUE);
        spdChart = ChartUtil.createCommonDialChart(Bundle.CTL_WindSpdChartTitle(), null, 0, 50);
        add(new ChartPanel(dirChart));
        add(new ChartPanel(spdChart));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(WindForcePanel.class, "WindForcePanel.border.title"))); // NOI18N
        setLayout(new java.awt.GridLayout(1, 2));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
